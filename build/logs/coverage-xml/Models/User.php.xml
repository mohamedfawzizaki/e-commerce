<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="User.php" path="\Models">
    <totals>
      <lines total="168" comments="92" code="76" executable="13" executed="9" percent="69.23"/>
      <methods count="6" tested="2" percent="33.33"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Models\User" start="18" executable="13" executed="9" crap="7.05">
      <namespace name="App\Models"/>
      <method name="casts" signature="casts(): array" start="89" end="97" crap="1" executable="6" executed="6" coverage="100"/>
      <method name="role" signature="role(): Illuminate\Database\Eloquent\Relations\BelongsTo" start="98" end="103" crap="1.04" executable="3" executed="2" coverage="66.666666666667"/>
      <method name="hasPermission" signature="hasPermission($permissionName)" start="105" end="108" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="status" signature="status(): Illuminate\Database\Eloquent\Relations\BelongsTo" start="109" end="112" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="passwordResetTokens" signature="passwordResetTokens(): Illuminate\Database\Eloquent\Relations\HasMany" start="133" end="136" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="sessions" signature="sessions(): Illuminate\Database\Eloquent\Relations\HasMany" start="137" end="140" crap="2" executable="1" executed="0" coverage="0"/>
    </class>
    <coverage>
      <line nr="92">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_all_users"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_returns_null_for_non_existing_user"/>
      </line>
      <line nr="100">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
      </line>
      <line nr="102">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
      </line>
      <line nr="111">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
      </line>
      <line nr="91">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_all_users"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_returns_null_for_non_existing_user"/>
      </line>
      <line nr="93">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_all_users"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_returns_null_for_non_existing_user"/>
      </line>
      <line nr="94">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_all_users"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_returns_null_for_non_existing_user"/>
      </line>
      <line nr="95">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_all_users"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_returns_null_for_non_existing_user"/>
      </line>
      <line nr="96">
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_mailable_content"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_verifivcation_email"/>
        <covered by="Tests\Feature\Emails\EmailVerificationTest::test_email_verification_service_sends_activation_email"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_database_seeder_populates_users"/>
        <covered by="Tests\Integration\Internal\SeederTest::test_user_seeder_populates_roles"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_all_users"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_retrieves_a_user_by_id"/>
        <covered by="Tests\Integration\Internal\UserRepositoryTest::test_it_returns_null_for_non_existing_user"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Models</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Contracts\Auth\MustVerifyEmail</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Laravel\Sanctum\HasApiTokens</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Database\Factories\UserFactory</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Notifications\Notifiable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\SoftDeletes</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Relations\HasOne</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Concerns\HasUuids</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Relations\HasMany</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Relations\BelongsTo</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Factories\HasFactory</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Foundation\Auth\User</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Authenticatable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Relations\BelongsToMany</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">User</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXTENDS">extends</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Authenticatable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MustVerifyEmail</token>
      </line>
      <line no="19">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/** @use HasFactory&lt;UserFactory&gt; */</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasFactory</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Notifiable</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasUuids</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SoftDeletes</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasApiTokens</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22"/>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="24">
        <token name="T_DOC_COMMENT">     * Indicates if the model's ID is auto-incrementing.</token>
      </line>
      <line no="25">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT">     * @var bool</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$incrementing</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29"/>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT">     * The data type of the primary key ID.</token>
      </line>
      <line no="32">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="33">
        <token name="T_DOC_COMMENT">     * @var string</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$keyType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'string'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36"/>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT">     * The attributes that are mass assignable.</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="40">
        <token name="T_DOC_COMMENT">     * @var list&lt;string&gt;</token>
      </line>
      <line no="41">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fillable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role_id'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE">       </token>
        <token name="T_COMMENT">// If role can be set during registration/profile update</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'status_id'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE">     </token>
        <token name="T_COMMENT">// If status can be set during registration/profile update</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'username'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE">      </token>
        <token name="T_COMMENT">// Unique username</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE">         </token>
        <token name="T_COMMENT">// Unique email address</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE">      </token>
        <token name="T_COMMENT">// Hashed password</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT">     * The attributes that should be hidden for serialization.</token>
      </line>
      <line no="51">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">     * @var list&lt;string&gt;</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hidden</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'remember_token'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verification_code'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="60">
        <token name="T_DOC_COMMENT">     * The model's default values for attributes.</token>
      </line>
      <line no="61">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="62">
        <token name="T_DOC_COMMENT">     * @var array</token>
      </line>
      <line no="63">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$attributes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role_id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Default role (e.g., User role)</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'status_id'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Default status (e.g., Active)</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verified_at'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Not verified by default</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verification_code'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verification_expires_at'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'last_login_at'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="73">
        <token name="T_DOC_COMMENT">     * The relationships that should always be loaded.</token>
      </line>
      <line no="74">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="75">
        <token name="T_DOC_COMMENT">     * @var array</token>
      </line>
      <line no="76">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// protected $with = ['roles'];</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="79">
        <token name="T_DOC_COMMENT">     * All of the relationships to be touched.</token>
      </line>
      <line no="80">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="81">
        <token name="T_DOC_COMMENT">     * @var array</token>
      </line>
      <line no="82">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$touches</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'status'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="85">
        <token name="T_DOC_COMMENT">     * Get the attributes that should be cast.</token>
      </line>
      <line no="86">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="87">
        <token name="T_DOC_COMMENT">     * @return array&lt;string, string&gt;</token>
      </line>
      <line no="88">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">casts</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verified_at'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'datetime'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'email_verification_expires_at'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'datetime'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'last_login_at'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'datetime'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'password'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'hashed'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">role</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">BelongsTo</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">belongsTo</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Role</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">withDefault</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Role</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$role</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$role</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">id</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Role</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">where</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'customer'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'id'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="104"/>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hasPermission</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$permissionName</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">role</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">permissions</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">contains</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$permissionName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">status</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">BelongsTo</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">belongsTo</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Status</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function phones(): HasMany</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return $this-&gt;hasMany(Phone::class, 'user_id', 'id');</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function addresses(): BelongsToMany</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return $this-&gt;belongsToMany(Address::class, 'user_address', 'user_id', 'address_id')</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//         -&gt;using(UserAddress::class)</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//         -&gt;as('pivot')</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//         -&gt;withPivot('is_primary')</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//         -&gt;withTimestamps();</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function defaultAddress(): BelongsToMany</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return $this-&gt;belongsToMany(Address::class, 'user_address', 'user_id', 'address_id')-&gt;where('is_default', true);</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function profile(): HasOne</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return $this-&gt;hasOne(Profile::class);</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">passwordResetTokens</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasMany</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">PasswordResetToken</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sessions</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasMany</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Session</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function authTokens(): HasMany</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return $this-&gt;hasMany(AuthToken::class);</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function twoFactorAuth(): HasOne</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return $this-&gt;hasOne(TwoFactorAuth::class);</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function userActivityLogs(): HasMany</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return $this-&gt;hasMany(Session::class);</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="153"/>
      <line no="154">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// /**</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//  * Create a new factory instance for the model.</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//  */</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// protected static function newFactory()</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return UserFactory::new();</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="161"/>
      <line no="162">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function username()</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return 'username';</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="166"/>
      <line no="167"/>
      <line no="168">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
    </source>
  </file>
</phpunit>
