<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Role.php" path="\Models">
    <totals>
      <lines total="99" comments="63" code="36" executable="2" executed="0" percent="0.00"/>
      <methods count="2" tested="0" percent="0.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Models\Role" start="12" executable="2" executed="0" crap="6">
      <namespace name="App\Models"/>
      <method name="users" signature="users(): Illuminate\Database\Eloquent\Relations\HasMany" start="88" end="92" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="permissions" signature="permissions()" start="94" end="97" crap="2" executable="1" executed="0" coverage="0"/>
    </class>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_COMMENT">// Declare the namespace for the Role model.</token>
      </line>
      <line no="4">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Models</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="5"/>
      <line no="6">
        <token name="T_COMMENT">// Import necessary classes from the Laravel framework.</token>
      </line>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Model</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">                      </token>
        <token name="T_COMMENT">// Base Eloquent model class.</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Factories\HasFactory</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">         </token>
        <token name="T_COMMENT">// Enables factory features.</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Relations\HasMany</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// For defining one-to-many relationships.</token>
      </line>
      <line no="10"/>
      <line no="11">
        <token name="T_COMMENT">// Define the Role model class.</token>
      </line>
      <line no="12">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Role</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXTENDS">extends</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Model</token>
      </line>
      <line no="13">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// Include the HasFactory trait to allow the use of model factories.</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasFactory</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">    </token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT">     * The attributes that are mass assignable.</token>
      </line>
      <line no="19">
        <token name="T_DOC_COMMENT">     * These fields can be populated using an array of data, for example when creating a new role.</token>
      </line>
      <line no="20">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT">     * @var array&lt;int, string&gt;</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fillable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'name'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT">// The role name (e.g., 'admin', 'customer').</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'description'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE">             </token>
        <token name="T_COMMENT">// A description providing additional information about the role.</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 'permissions-&gt;can_create', // Allow mass assignment for the "can_create" permission within the JSON permissions.</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 'permissions-&gt;can_edit',   // Allow mass assignment for the "can_edit" permission.</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 'permissions-&gt;can_update', // Allow mass assignment for the "can_update" permission.</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 'permissions-&gt;can_delete', // Allow mass assignment for the "can_delete" permission.</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// 'permissions-&gt;can_read',   // Allow mass assignment for the "can_read" permission.</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     * The attributes that should be cast.</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     * Casting the 'permissions' attribute to an array ensures that JSON data is automatically decoded into an array.</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="37">
        <token name="T_DOC_COMMENT">     * @var array&lt;string, string&gt;</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// protected $casts = [</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     'permissions' =&gt; 'array', // Convert the JSON permissions to a PHP array.</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// ];</token>
      </line>
      <line no="42"/>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="44">
        <token name="T_DOC_COMMENT">     * The attributes that should be hidden when the model is serialized.</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     * This is useful for preventing internal timestamps from being exposed in JSON responses.</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     * @var array&lt;int, string&gt;</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$hidden</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'created_at'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Hide the creation timestamp.</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'updated_at'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">// Hide the update timestamp.</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     * Get default permissions for a new role.</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     * This static method returns an array of default permissions that can be used when creating a new role.</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="58">
        <token name="T_DOC_COMMENT">     * @return array&lt;string, bool&gt; Returns default permission settings.</token>
      </line>
      <line no="59">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public static function defaultPermissions(): array</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     // Default permissions: by default, roles do not have editing or deletion privileges.</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return [</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//         'can_edit' =&gt; false,</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//         'can_delete' =&gt; false,</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     ];</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="68"/>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="70">
        <token name="T_DOC_COMMENT">     * Check if the role has a specific permission.</token>
      </line>
      <line no="71">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="72">
        <token name="T_DOC_COMMENT">     * @param string $permission The permission key to check (e.g., 'can_edit').</token>
      </line>
      <line no="73">
        <token name="T_DOC_COMMENT">     * @return bool Returns true if the permission exists and is set to true; otherwise, false.</token>
      </line>
      <line no="74">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// public function hasPermission(string $permission): bool</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// {</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     // Retrieve the permissions array; default to an empty array if no permissions are set.</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     $permissions = $this-&gt;permissions ?? [];</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     // Check if the given permission key exists and is explicitly set to true.</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//     return !empty($permissions[$permission]) &amp;&amp; $permissions[$permission] === true;</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// }</token>
      </line>
      <line no="82"/>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="84">
        <token name="T_DOC_COMMENT">     * Define the relationship: A Role has many Users.</token>
      </line>
      <line no="85">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="86">
        <token name="T_DOC_COMMENT">     * @return HasMany Returns a HasMany relationship instance linking to the User model.</token>
      </line>
      <line no="87">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">users</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HasMany</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// Establish a one-to-many relationship with the User model using the 'role_id' foreign key.</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">User</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role_id'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="93"/>
      <line no="94">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">permissions</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">belongsToMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Permission</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'role_permission'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="98"/>
      <line no="99">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
    </source>
  </file>
</phpunit>
