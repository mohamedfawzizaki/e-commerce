____________________________________________________________________________________________________________________________________________
                                            
                                            3. Login & Logout
                                            
 _________________________________________________________________________________________________________________________________________
| POST   /api/auth/login                         | Authenticate a user and return an access token.
| POST   /api/auth/token/validate                | Validate the current access token.
| POST   /api/auth/refresh-token                 | Refresh the access token using a refresh token.
| POST   /api/auth/token/re-authenticate         | Require Reauthentication for Sensitive Actions (e.g., updating email, deleting account).
|------------------------------------------------|----------------------------------------------------------------------------------------
| POST   /api/auth/logout                        | Logs out the user and revokes the access token.
| POST   /api/auth/token/revoke                  | Invalidates a specific refresh token.
| DELETE /api/auth/tokens/{token_id}             | Logs out a user from a specific session by revoking a Specific token.
| POST   /api/auth/token/blacklist               | Blacklist a token (admin|only).
| POST   /api/auth/tokens/revoke-all             | Logs out the user from all active sessions by revoking all tokens.
|------------------------------------------------|----------------------------------------------------------------------------------------
| GET    /api/auth/tokens                        | Retrieves all active tokens associated with the user account.
| GET    /api/auth/token/details                 | Returns metadata about the current access token (useful for debugging or monitoring).
| GET    /api/auth/me                            | Get authenticated user info      
|________________________________________________|________________________________________________________________________________________
    

____________________________________________________________________________________________________________________________________________
                                    Detailed Workflow: Login & Logout  

This workflow outlines how users authenticate, manage sessions, and securely log out.  

-----------------------------------------------------------------------------------------------------------
1️⃣ User Login  
Used When: A user wants to access their account.  

🔹 Flow:  
1. User submits credentials → POST /api/auth/login  
   - Required: email & password.  
2. System verifies credentials:  
   - ✅ If valid → Generates and returns Access Token (JWT or Sanctum).  
   - ❌ If invalid → Returns an authentication error.  
3. User is logged in and can access protected resources.  

🔐 Security Measures:  
- Rate limiting to prevent brute-force attacks.  
- 2FA (if enabled) for extra security.  

-----------------------------------------------------------------------------------------------------------
2️⃣ Token Validation & Refresh  
Used When: Checking if a token is valid or extending session without re-login.  

🔹 Validation:  
- POST /api/auth/token/validate → Confirms if the access token is still valid.  

🔹 Refreshing Token:  
- POST /api/auth/refresh-token → Uses a refresh token to generate a new access token.  
- ✅ If refresh token is valid → Issues a new access token.  
- ❌ If refresh token is invalid/expired → Requires full re-login.  

🔐 Security Measures:  
- Short-lived access tokens (e.g., 15 mins) with longer refresh tokens (e.g., 7 days).  
- Revoke old tokens when issuing a new one.  

-----------------------------------------------------------------------------------------------------------
3️⃣ Reauthentication for Sensitive Actions  
Used When: User wants to perform a high-risk action (e.g., update email, delete account).  

🔹 Flow:  
1. POST /api/auth/token/re-authenticate → User must re-enter password to confirm identity.  
2. ✅ If successful → User receives a temporary session token.  
3. ❌ If failed → Deny action and log attempt.  

🔐 Security Measures:  
- OTP-based confirmation (optional).  
- Request expiration (e.g., valid for 10 minutes only).  

-----------------------------------------------------------------------------------------------------------
4️⃣ Logging Out & Token Revocation  
Used When: A user wants to log out or manage active sessions.  

🔹 Logout from Current Session:  
- POST /api/auth/logout → Revokes current access token.  

🔹 Logout from Specific Session:  
- DELETE /api/auth/tokens/{token_id} → Logs out a user from a specific session.  

🔹 Logout from All Sessions:  
- POST /api/auth/tokens/revoke-all → Revokes all user tokens (logs out from all devices).  

🔹 Blacklist Token (Admin Only):  
- POST /api/auth/token/blacklist → Prevents a token from being reused.  

🔐 Security Measures:  
- Revoke refresh tokens when logging out.  
- Blacklist compromised tokens (useful for breach detection).  

-----------------------------------------------------------------------------------------------------------
5️⃣ Token Management & Monitoring  
🔹 Get All Active Tokens:  
- GET /api/auth/tokens → Returns a list of all active sessions for the user.  

🔹 Get Token Details:  
- GET /api/auth/token/details → Shows metadata about the token (e.g., expiration, issued at, device info).  

🔐 Security Measures:  
- Log token activity to detect suspicious logins.  
- Restrict refresh token usage (e.g., allow only one active refresh token per user).  

-----------------------------------------------------------------------------------------------------------
✅ Best Practices for Security  
✔ Short expiration for access tokens (e.g., 15 mins).  
✔ Secure refresh token storage (e.g., HTTP-only cookies).  
✔ Detect unusual login activity (e.g., device, IP monitoring).  
✔ Use refresh-token rotation to prevent replay attacks.  

-----------------------------------------------------------------------------------------------------------
_____________________________________________________________________________________________________________________________________________
